"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.

–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞ ADMINS.
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º
"""

import logging
from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder

from admins import is_admin, ADMINS

logger = logging.getLogger(__name__)


# ============================================================================
# –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò
# ============================================================================

async def admin_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ /admin - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
    """
    
    user_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑ username"
    
    logger.info(f"üì® /admin –æ—Ç {user_id} (@{username})")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if not is_admin(user_id):
        logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ –æ—Ç {user_id} (@{username})")
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    text = f"""üîê <b>–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨</b>

üë§ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫: @{username} (ID: {user_id})

üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
    keyboard.button(text="üìã –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="admin_requests")
    keyboard.button(text="üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data="admin_list")
    keyboard.button(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="admin_info")
    keyboard.adjust(1)
    
    try:
        await message.answer(text, reply_markup=keyboard.as_markup())
        logger.info(f"‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è {user_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ admin_command: {e}", exc_info=True)


# ============================================================================
# –°–¢–ê–¢–ò–°–¢–ò–ö–ê
# ============================================================================

async def button_admin_stats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞."""
    
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if not is_admin(user_id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    logger.info(f"üì® –ö–Ω–æ–ø–∫–∞ 'admin_stats' –æ—Ç {user_id}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –º–æ–¥—É–ª—è database
        from database import get_statistics
        
        stats = get_statistics()
        total_requests = stats["total_requests"]
        unique_users = stats["unique_users"]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = f"""üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</b>

üìù <b>–ó–∞—è–≤–∫–∏:</b>
   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total_requests}

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}

üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> —Ç–æ–ª—å–∫–æ —á—Ç–æ"""
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        text = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n{str(e)}"
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")
    
    try:
        await callback.message.answer(text, reply_markup=keyboard.as_markup())
        logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É {user_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
    
    await callback.answer()


# ============================================================================
# –ü–†–û–°–ú–û–¢–† –ó–ê–Ø–í–û–ö
# ============================================================================

async def button_admin_requests(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏."""
    
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if not is_admin(user_id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    logger.info(f"üì® –ö–Ω–æ–ø–∫–∞ 'admin_requests' –æ—Ç {user_id}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –∏–∑ –º–æ–¥—É–ª—è database
        from database import get_all_requests
        
        requests = get_all_requests(limit=10)
        
        if not requests:
            text = "üìã <b>–ó–ê–Ø–í–ö–ò</b>\n\n–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏"
        else:
            text = f"üìã <b>–ü–û–°–õ–ï–î–ù–ò–ï 10 –ó–ê–Ø–í–û–ö</b>\n\n"
            
            for req in requests:
                req_id, req_user_id, req_username, amount, link, created_at = req
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É
                text += f"<b>–ó–∞—è–≤–∫–∞ #{req_id}</b>\n"
                text += f"üë§ @{req_username or '–Ω–µ—Ç username'} (ID: {req_user_id})\n"
                text += f"üí∞ –°—É–º–º–∞: {amount} ¬•\n"
                text += f"üîó –°—Å—ã–ª–∫–∞: {link}\n"
                text += f"üìÖ –î–∞—Ç–∞: {created_at}\n"
                text += "‚îÄ" * 30 + "\n\n"
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}", exc_info=True)
        text = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫</b>\n\n{str(e)}"
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")
    
    try:
        await callback.message.answer(text, reply_markup=keyboard.as_markup())
        logger.info(f"‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É {user_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫: {e}", exc_info=True)
    
    await callback.answer()


# ============================================================================
# –°–ü–ò–°–û–ö –ê–î–ú–ò–ù–û–í
# ============================================================================

async def button_admin_list(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤."""
    
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if not is_admin(user_id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    logger.info(f"üì® –ö–Ω–æ–ø–∫–∞ 'admin_list' –æ—Ç {user_id}")
    
    text = "üë• <b>–°–ü–ò–°–û–ö –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í</b>\n\n"
    
    if not ADMINS:
        text += "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.\n\n"
        text += "–î–æ–±–∞–≤—å—Ç–µ –∞–¥–º–∏–Ω–æ–≤ –≤ —Ñ–∞–π–ª <code>admins.py</code>"
    else:
        for idx, (admin_id, admin_username) in enumerate(ADMINS, 1):
            text += f"{idx}. @{admin_username} (ID: <code>{admin_id}</code>)\n"
        
        text += f"\n<b>–í—Å–µ–≥–æ –∞–¥–º–∏–Ω–æ–≤:</b> {len(ADMINS)}"
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")
    
    try:
        await callback.message.answer(text, reply_markup=keyboard.as_markup())
        logger.info(f"‚úÖ –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É {user_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤: {e}", exc_info=True)
    
    await callback.answer()


# ============================================================================
# –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–û–¢–ï
# ============================================================================

async def button_admin_info(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ."""
    
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if not is_admin(user_id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    logger.info(f"üì® –ö–Ω–æ–ø–∫–∞ 'admin_info' –æ—Ç {user_id}")
    
    text = """‚ÑπÔ∏è <b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–û–¢–ï</b>

<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> BUFF Pay Bot
<b>–í–µ—Ä—Å–∏—è:</b> 1.0

<b>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:</b>
‚Ä¢ –ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –≥–∞–π–¥–∞–º–∏
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä—É
‚Ä¢ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

<b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> SQLite (buff_requests.db)
<b>–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞:</b> aiogram 3.x

<b>–§–∞–π–ª—ã:</b>
‚Ä¢ bot.py - –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
‚Ä¢ config.py - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
‚Ä¢ admins.py - —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
‚Ä¢ handlers/ - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")
    
    try:
        await callback.message.answer(text, reply_markup=keyboard.as_markup())
        logger.info(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É {user_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}", exc_info=True)
    
    await callback.answer()


# ============================================================================
# –í–û–ó–í–†–ê–¢ –í –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨
# ============================================================================

async def button_admin_back(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    
    user_id = callback.from_user.id
    username = callback.from_user.username or "–±–µ–∑ username"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if not is_admin(user_id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    logger.info(f"üì® –ö–Ω–æ–ø–∫–∞ 'admin_back' –æ—Ç {user_id}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
    text = f"""üîê <b>–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨</b>

üë§ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫: @{username} (ID: {user_id})

üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"""
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
    keyboard.button(text="üìã –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="admin_requests")
    keyboard.button(text="üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data="admin_list")
    keyboard.button(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="admin_info")
    keyboard.adjust(1)
    
    try:
        await callback.message.answer(text, reply_markup=keyboard.as_markup())
        logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω–∫—É –¥–ª—è {user_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω–∫—É: {e}", exc_info=True)
    
    await callback.answer()

