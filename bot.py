"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞ BUFF Pay.

–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç polling.
"""

import asyncio
import logging
from aiogram import Dispatcher, Router, F, Bot, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command

from config import BOT_TOKEN
from handlers import start, requests, admin, subscription

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–æ–ª–≥–∏–π –ø–æ–ª–ª–∏–Ω–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
    """
    
    logger.info("=" * 60)
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –±–æ—Ç–∞...")
    logger.info("=" * 60)
    
    # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    bot = Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    bot_info = await bot.get_me()
    logger.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username} (ID: {bot_info.id})")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º MemoryStorage –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    storage = MemoryStorage()
    
    # –°–æ–∑–¥–∞—ë–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä (–æ–Ω —É–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏)
    dp = Dispatcher(storage=storage)
    
    # –°–æ–∑–¥–∞—ë–º Router –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    router = Router()
    
    logger.info("üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...")
    
    # === –°–û–û–ë–©–ï–ù–ò–Ø (MESSAGE HANDLERS) ===
    
    # –ö–æ–º–∞–Ω–¥–∞ /start
    router.message.register(
        start.start_command,
        Command("start")
    )
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    
    # –ö–æ–º–∞–Ω–¥–∞ /admin (–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å)
    router.message.register(
        admin.admin_command,
        Command("admin")
    )
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /admin –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    
    # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏
    router.message.register(requests.collect_request_data)
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    
    # === CALLBACK (–ö–ù–û–ü–ö–ò) ===
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
    router.callback_query.register(
        subscription.button_check_subscription,
        F.data == "check_subscription"
    )
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Steam
    router.callback_query.register(
        start.button_register,
        F.data == "register"
    )
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    
    # –ì–∞–π–¥ –ø–æ —Å—Å—ã–ª–∫–µ
    router.callback_query.register(
        start.button_send_link,
        F.data == "send_link"
    )
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ '–ö–∞–∫ —Å–∫–∏–Ω—É—Ç—å —Å—Å—ã–ª–∫—É' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    
    # –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
    router.callback_query.register(
        start.button_how_it_works,
        F.data == "how_it_works"
    )
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ '–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞
    router.callback_query.register(
        start.button_support,
        F.data == "support"
    )
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ '–ü–æ–¥–¥–µ—Ä–∂–∫–∞' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    
    # –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É
    router.callback_query.register(
        requests.button_request,
        F.data == "request"
    )
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    
    # –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
    router.callback_query.register(
        start.button_back_to_start,
        F.data == "back_to_start"
    )
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    
    # === –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ===
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    router.callback_query.register(
        admin.button_admin_stats,
        F.data == "admin_stats"
    )
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    
    # –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
    router.callback_query.register(
        admin.button_admin_requests,
        F.data == "admin_requests"
    )
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ '–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    
    # –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
    router.callback_query.register(
        admin.button_admin_list,
        F.data == "admin_list"
    )
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ '–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
    router.callback_query.register(
        admin.button_admin_info,
        F.data == "admin_info"
    )
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω–∫—É
    router.callback_query.register(
        admin.button_admin_back,
        F.data == "admin_back"
    )
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ '–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    
    # –í–∫–ª—é—á–∞–µ–º router –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dp.include_router(router)
    logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n")
    
    print("\n" + "="*60)
    print("üíé BUFF Pay Bot –ê–ö–¢–ò–í–ï–ù –ò –ì–û–¢–û–í!")
    print("="*60)
    print("\nüì± –û—Ç–ø—Ä–∞–≤—å /start –±–æ—Ç—É –≤ Telegram\n")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞—é polling...")
        await dp.start_polling(
            bot,
            allowed_updates=dp.resolve_used_update_types()
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ polling: {e}", exc_info=True)
    finally:
        logger.info("‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        await bot.session.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (Ctrl+C)")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
